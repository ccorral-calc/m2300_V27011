58,59d57
< static int PCMIndex = 0;
< 
69d66
< 
72,91c69
< 
<     //printf("Event def size %d\r\n",100*sizeof(M1553_BUS));
<     EventDef       = (M1553_BUS*)malloc(100*sizeof(M1553_BUS));
< 
<     //printf("PCMEvent def size %d\r\n",100*sizeof(PCM_DEF));
<     PCMEventDef    = (PCM_DEF*)malloc(100*sizeof(PCM_DEF));
< 
<     //printf("DataConversion size %d\r\n",100*sizeof(DATA_CONVERSION));
<     dataConversion = (DATA_CONVERSION*)malloc(100*sizeof(DATA_CONVERSION));
< 
< }
< 
< int M23_GetM1553Index()
< {
<     return(M1553Index);
< }
< 
< int M23_GetPCMIndex()
< {
<     return(PCMIndex);
---
>     EventDef = (M1553_BUS*)malloc(100*sizeof(M1553_BUS));
96,97d73
<     int i;
< 
99,145d74
<     PCMIndex = 0;
< 
<     for(i =0;i < 16;i++)
<     {
<         TableEntryNumber[i] = 0;
<         PCMTableEntryNumber[i] = 0;
<     }
< 
< }
< 
< 
< UINT8 M23_IsTimeEvent(UINT8 TableEntry,UINT8 BusNumber,UINT16 *WordNum,UINT32 *Event)
< {
<     int i;
< 
<     for(i = 0; i < M1553Index;i++)
<     {
<         if( (M1553Events[i].TableEntry == (UINT32)TableEntry) && (M1553Events[i].BusNumber == (UINT32)BusNumber) )
<         {
<             if( (M1553Events[i].EventNum >= TFOM_F15C_EVENT) && (M1553Events[i].EventNum <= R0_EVENT) )
<             {
<                  *WordNum = M1553Events[i].DataWordNum;
<                  *Event   = M1553Events[i].EventNum;
<                  return(1);
<             }
<         }
<     }
< 
<     return(0);
< }
< 
< UINT8 M23_IsMultiEvent(UINT8 TableEntry,UINT8 BusNumber,UINT16 *CW,int *index)
< {
<     int i;
< 
<     for(i = 0; i < M1553Index;i++)
<     {
<         if( (M1553Events[i].TableEntry == (UINT32)TableEntry) && (M1553Events[i].BusNumber == (UINT32)BusNumber) )
<         {
<             if( M1553Events[i].MultiEvent == 1)
<             {
<                  *CW = M1553Events[i].CommandWord;
<                  *index = M1553Index;
<                  return(1);
<             }
<         }
<     }
147d75
<     return(0);
150d77
< 
207,251d133
< void M23_CreateM1553Mask()
< {
<     int i;
<     int k;
< 
<     int first;
<     int index = 0;
< 
<     M23_CHANNEL  const *config;
< 
<     SetupGet(&config);
< 
<     for(i = 0; i < config->NumConfigured1553;i++)
<     {
<         first = 0;
<         for(k = 1; k < M1553Index;k++)
<         {
<             if(M1553Events[k].ChannelID == config->m1553_chan[i].chanID)
<             {
<                 if(M1553Events[k].CommandWord == M1553Events[k - 1].CommandWord)
<                 {
<                     if( M1553Events[k].DataWordNum ==  M1553Events[k - 1].DataWordNum)
<                     {
<                         if(first == 0)
<                         {
<                             index = k-1; //This is the first Entry
<                             M1553Events[index].MultiEvent = 1;
<                             M1553Events[index].TotalMask = M1553Events[k].Mask | M1553Events[k-1].Mask;
<                             first = 1;
<                         }
<                         else
<                         {
<                             M1553Events[index].TotalMask |= M1553Events[k].Mask;
<                         }
<                     }
<                 }
<                 else
<                 {
<                     first = 0;
<                 }
<             }
<         }
<     }
< }
< 
475,539c357
< void M23_AddB52M1553TimeEvents(int chanID)
< {
< 
<     /*We will be using 4085,4086,4087*/
< 
<     /*Add the B52 CC05 Event*/
<     M1553Events[M1553Index].CommandWord    = 0xCC05;
<     M1553Events[M1553Index].ChannelID      = chanID;
<     M1553Events[M1553Index].EventNum       = B52_CC05_EVENT;
<     M1553Events[M1553Index].DataWordNum    = 0;
<     M1553Events[M1553Index].Mask           = 0xFFFF;
<     M1553Events[M1553Index].EventEnable    = 1;
<     M1553Events[M1553Index].CW_Only        = 1;
<     M1553Events[M1553Index].EventMode      = 0;
<     M1553Events[M1553Index].EventIC        = 0;
<     M1553Events[M1553Index].EventContinue  = 0;
< 
<     M1553Index++;
< 
<     /*Add the B52 CC29 Event*/
<     M1553Events[M1553Index].CommandWord    = 0xCC29;
<     M1553Events[M1553Index].ChannelID      = chanID;
<     M1553Events[M1553Index].EventNum       = B52_CC29_EVENT;
<     M1553Events[M1553Index].DataWordNum    = 0;
<     M1553Events[M1553Index].Mask           = 0xFFFF;
<     M1553Events[M1553Index].EventEnable    = 1;
<     M1553Events[M1553Index].CW_Only        = 1;
<     M1553Events[M1553Index].EventMode      = 0;
<     M1553Events[M1553Index].EventIC        = 0;
<     M1553Events[M1553Index].EventContinue  = 0;
< 
<     M1553Index++;
< 
<     /*Add the B52 CC29 Event*/
<     M1553Events[M1553Index].CommandWord    = 0xCC2B;
<     M1553Events[M1553Index].ChannelID      = chanID;
<     M1553Events[M1553Index].EventNum       = B52_CC2B_EVENT;
<     M1553Events[M1553Index].DataWordNum    = 0;
<     M1553Events[M1553Index].Mask           = 0xFFFF;
<     M1553Events[M1553Index].EventEnable    = 1;
<     M1553Events[M1553Index].CW_Only        = 1;
<     M1553Events[M1553Index].EventMode      = 0;
<     M1553Events[M1553Index].EventIC        = 0;
<     M1553Events[M1553Index].EventContinue  = 0;
< 
<     M1553Index++;
< 
<     /*Add the B52 CD00 Event*/
<     M1553Events[M1553Index].CommandWord    = 0xCD00;
<     M1553Events[M1553Index].ChannelID      = chanID;
<     M1553Events[M1553Index].EventNum       = B52_CD00_EVENT;
<     M1553Events[M1553Index].DataWordNum    = 0;
<     M1553Events[M1553Index].Mask           = 0xFFFF;
<     M1553Events[M1553Index].EventEnable    = 1;
<     M1553Events[M1553Index].CW_Only        = 1;
<     M1553Events[M1553Index].EventMode      = 0;
<     M1553Events[M1553Index].EventIC        = 0;
<     M1553Events[M1553Index].EventContinue  = 0;
< 
<     M1553Index++;
< 
< 
< }
< 
< void M23_FillInM1553DataConversionEvent(int index,int EventNumber,int msg,int Fragment)
---
> void M23_FillInM1553Event(int chanIndex,int BusIndex,int MeasIndex,int EventIndex,int MeasEvent)
541c359
<     //static int         ch = 0;
---
>     //static int         ch = 0;  
543,544d360
<     int                EventIndex = (dataConversion+index)->EventIndex;
<     int                debug;
549,625d364
<     M23_GetDebugValue(&debug);
< 
<     M1553Events[M1553Index].ConversionIndex   = (UINT16)index;
<     M1553Events[M1553Index].CW_Only           = 0;
<     M1553Events[M1553Index].EventNum          = EventNumber+1;
<     M1553Events[M1553Index].EventEnable       = 1;
<     M1553Events[M1553Index].EventContinue     = 0;
<     M1553Events[M1553Index].IsDataConversion  = 1;
<     M1553Events[M1553Index].EventMode         = (dataConversion+index)->EventMode;
<     M1553Events[M1553Index].EventIC           = (dataConversion+index)->EventIC;
<     M1553Events[M1553Index].EventType         = (dataConversion+index)->EventType;
<     M1553Events[M1553Index].ConvType          = (dataConversion+index)->ConvType;
<     M1553Events[M1553Index].NotCapturedYet    = 1;
<     M1553Events[M1553Index].TotalMask         = 0x0;
<     M1553Events[M1553Index].MultiEvent        = 0;
<     M1553Events[M1553Index].DiscreteValue     = 0;
< 
<     if(msg == 1)
<     {
< 
<         M1553Events[M1553Index].DataWordNum    = (dataConversion+index)->Msg1.Event[EventIndex].WordNumber[Fragment];
<         M1553Events[M1553Index].FragPosition   = (dataConversion+index)->Msg1.Event[EventIndex].Position[Fragment];
<         M1553Events[M1553Index].Mask           = (dataConversion+index)->Msg1.Event[EventIndex].Mask[Fragment];
< 
<         CW = ( (dataConversion+index)->Msg1.RT << 11) ;
<         CW |= ((dataConversion+index)->Msg1.TransRcv << 10);
<         CW |= ((dataConversion+index)->Msg1.SubAddr << 5);
<         CW |= ((dataConversion+index)->Msg1.WordCount);
< 
<         if(debug)
<             printf("1553 Data Conversion %d, CW 0x%x\r\n",M1553Index,CW);
< 
<         M1553Events[M1553Index].CommandWord       = (UINT16)CW;
<         M1553Events[M1553Index].ChannelID         = (dataConversion+index)->ChanID1;
<         M1553Events[M1553Index].IsTrigger         = (dataConversion+index)->Msg1.Event[EventIndex].IsTrigger;
< 
<         if((dataConversion+index)->Msg1.Event[EventIndex].CW_Only == 1)
<         {
<             M1553Events[M1553Index].CW_Only        = 1;
<             M1553Events[M1553Index].DataWordNum    = 0;
<             M1553Events[M1553Index].Mask           = 0xFFFF;
<             M1553Events[M1553Index].NotCapturedYet = 0;
<         }
< 
<     }
<     else
<     {
<         M1553Events[M1553Index].DataWordNum    = (dataConversion+index)->Msg2.Event[EventIndex].WordNumber[Fragment];
<         M1553Events[M1553Index].FragPosition   = (dataConversion+index)->Msg2.Event[EventIndex].Position[Fragment];
<         M1553Events[M1553Index].Mask           = (dataConversion+index)->Msg2.Event[EventIndex].Mask[Fragment];
< 
<         CW = ( (dataConversion+index)->Msg2.RT << 11) ;
<         CW |= ((dataConversion+index)->Msg2.TransRcv << 10);
<         CW |= ((dataConversion+index)->Msg2.SubAddr << 5);
<         CW |= ((dataConversion+index)->Msg2.WordCount);
< 
<         M1553Events[M1553Index].CommandWord       = (UINT16)CW;
<         M1553Events[M1553Index].ChannelID         = (dataConversion+index)->ChanID2;
<         M1553Events[M1553Index].IsTrigger         = (dataConversion+index)->Msg2.Event[EventIndex].IsTrigger;
< 
<         if((dataConversion+index)->Msg2.Event[EventIndex].CW_Only == 1)
<         {
<             M1553Events[M1553Index].CW_Only        = 1;
<             M1553Events[M1553Index].DataWordNum    = 0;
<             M1553Events[M1553Index].Mask           = 0xFFFF;
<             M1553Events[M1553Index].NotCapturedYet = 0;
<         }
<     }
< 
<     M1553Index++;
< }
< 
< void M23_FillInM1553Event(int chanIndex,int BusIndex,int MeasIndex,int EventIndex,int MeasEvent,int Fragment)
< {
<     //static int         ch = 0;
<     int                CW;
<     M23_CHANNEL  const *config;
627c366,379
<     SetupGet(&config);
---
>     CW = ( (EventDef+BusIndex)->Msg[MeasIndex].RT << 11) ;
>     CW |= ((EventDef+BusIndex)->Msg[MeasIndex].TransRcv << 10);
>     CW |= ((EventDef+BusIndex)->Msg[MeasIndex].SubAddr << 5);
>     CW |= ((EventDef+BusIndex)->Msg[MeasIndex].WordCount);
>     M1553Events[M1553Index].CommandWord    = (UINT16)CW;
>     M1553Events[M1553Index].ChannelID      = config->m1553_chan[chanIndex].chanID;
>     M1553Events[M1553Index].EventNum       = EventIndex + 1;
>     M1553Events[M1553Index].DataWordNum    = (EventDef+BusIndex)->Msg[MeasIndex].Event[MeasEvent].WordNumber;
>     M1553Events[M1553Index].Mask           = (EventDef+BusIndex)->Msg[MeasIndex].Event[MeasEvent].Mask;
>     M1553Events[M1553Index].EventEnable    = 1;
>     M1553Events[M1553Index].CW_Only        = 0;
>     M1553Events[M1553Index].EventMode      = EventTable[EventIndex + 1].EventMode;
>     M1553Events[M1553Index].EventIC        = EventTable[EventIndex + 1].EventIC;
>     M1553Events[M1553Index].EventContinue  = 0;
629c381
<     if(EventTable[EventIndex + 1].DualEvent == 1)
---
>     if(EventTable[EventIndex].EventType == EVENT_TYPE_OTHER)
631,656c383,384
<         if((EventDef+BusIndex)->Msg[MeasIndex].RT <= 16)
<         {
<             (EventDef+BusIndex)->Msg[MeasIndex].RT = (EventDef+BusIndex)->Msg[MeasIndex].RT + 16;
<         }
<         else
<         {
<             (EventDef+BusIndex)->Msg[MeasIndex].RT = (EventDef+BusIndex)->Msg[MeasIndex].RT - 16;
<         }
< 
<         if((EventDef+BusIndex)->Msg[MeasIndex].SubAddr <= 16)
<         {
<             (EventDef+BusIndex)->Msg[MeasIndex].SubAddr = (EventDef+BusIndex)->Msg[MeasIndex].SubAddr + 16;
<         }
<         else
<         {
<             (EventDef+BusIndex)->Msg[MeasIndex].SubAddr = (EventDef+BusIndex)->Msg[MeasIndex].SubAddr - 16;
<         }
< 
<         M1553Events[M1553Index].CW_Only        = 1;
<         M1553Events[M1553Index].DataWordNum    = 0;
<         M1553Events[M1553Index].FragPosition   = 0;
<         M1553Events[M1553Index].Mask           = 0xFFFF;
<         M1553Events[M1553Index].EventMode      = 0;
<         M1553Events[M1553Index].EventIC        = 0;
< 
< 
---
>         M1553Events[M1553Index].CW_Only = 1;
>         M1553Events[M1553Index].EventContinue  = 0;
658,659d385
<     else if(EventTable[EventIndex + 1].NoResponseEvent == 1)
<     {
661,666c387,393
<         M1553Events[M1553Index].CW_Only        = 1;
<         M1553Events[M1553Index].DataWordNum    = 0;
<         M1553Events[M1553Index].FragPosition   = 0;
<         M1553Events[M1553Index].Mask           = 0xFFFF;
<         M1553Events[M1553Index].EventMode      = 0;
<         M1553Events[M1553Index].EventType      = EVENT_TYPE_MEAS_DISCRETE;
---
> #if 0
>     printf("M1553 Event %d CW = 0x%x\r\n",M1553Index, M1553Events[M1553Index].CommandWord);
>     printf("M1553 Event %d ID = %d\r\n",M1553Index, M1553Events[M1553Index].ChannelID);
>     printf("M1553 Event %d Event = %d\r\n",M1553Index, M1553Events[M1553Index].EventNum);
>     printf("M1553 Event %d Word Num = %d\r\n",M1553Index, M1553Events[M1553Index].DataWordNum);
>     printf("M1553 Event %d Mask = 0x%x\r\n",M1553Index, M1553Events[M1553Index].Mask);
> #endif
668,669c395,396
<     }
<     else
---
> #if 0
>     if(ch == config->m1553_chan[chanIndex].chanID)
671,679c398
<         M1553Events[M1553Index].CW_Only        = (EventDef+BusIndex)->Msg[MeasIndex].Event[MeasEvent].CW_Only;
<         M1553Events[M1553Index].DataWordNum    = (EventDef+BusIndex)->Msg[MeasIndex].Event[MeasEvent].WordNumber[Fragment];
<         M1553Events[M1553Index].FragPosition   = (EventDef+BusIndex)->Msg[MeasIndex].Event[MeasEvent].Position[Fragment];
<         M1553Events[M1553Index].Mask           = (EventDef+BusIndex)->Msg[MeasIndex].Event[MeasEvent].Mask[Fragment];
<         M1553Events[M1553Index].EventMode      = EventTable[EventIndex + 1].EventMode;
<         M1553Events[M1553Index].EventIC        = EventTable[EventIndex + 1].EventIC;
<         M1553Events[M1553Index].EventType      = EventTable[EventIndex + 1].EventType;
< 
<         if(M1553Events[M1553Index].CW_Only == 1)
---
>         if( M1553Events[M1553Index].CW_Only == 0)
681c400,420
<             M1553Events[M1553Index].Mask  = 0xFFFF;
---
>             if(M1553Events[M1553Index].CommandWord == M1553Events[M1553Index - 1].CommandWord)
>             {
>                 if( M1553Events[M1553Index].DataWordNum <  M1553Events[M1553Index - 1].DataWordNum)
>                 {
>                     M23_SwapM1553Event(M1553Index);
>                 }
>                 else if( M1553Events[M1553Index].DataWordNum ==  M1553Events[M1553Index - 1].DataWordNum)
>                 {
>                     if( M1553Events[M1553Index].Mask  <  M1553Events[M1553Index - 1].Mask )
>                     {
>                         M23_SwapM1553Event(M1553Index);
>                     }
>                 }
>             }
>             else
>             {
>                 if(M1553Events[M1553Index -1].EventContinue  == 1)
>                 {
>                     M1553Events[M1553Index - 1].EventContinue  = 0;
>                 }
>             }
685,702c424,425
<     CW = ( (EventDef+BusIndex)->Msg[MeasIndex].RT << 11) ;
<     CW |= ((EventDef+BusIndex)->Msg[MeasIndex].TransRcv << 10);
<     CW |= ((EventDef+BusIndex)->Msg[MeasIndex].SubAddr << 5);
<     CW |= ((EventDef+BusIndex)->Msg[MeasIndex].WordCount);
< 
<     M1553Events[M1553Index].CommandWord       = (UINT16)CW;
<     M1553Events[M1553Index].ChannelID         = config->m1553_chan[chanIndex].chanID;
<     M1553Events[M1553Index].EventNum          = EventIndex + 1;
<     M1553Events[M1553Index].EventEnable       = 1;
<     M1553Events[M1553Index].EventContinue     = 0;
<     M1553Events[M1553Index].IsDataConversion  = 0;
<     M1553Events[M1553Index].IsTrigger         = 0;
<     M1553Events[M1553Index].ConversionIndex   = 0;
<     M1553Events[M1553Index].ConvType          = 0;
<     M1553Events[M1553Index].NotCapturedYet    = 0;
<     M1553Events[M1553Index].TotalMask         = 0x0;
<     M1553Events[M1553Index].MultiEvent        = 0;
<     M1553Events[M1553Index].DiscreteValue     = 0;
---
>     ch = config->m1553_chan[chanIndex].chanID;
> #endif
718d440
< 
726d447
<     int e;
732,735d452
<     char meas[80];
<     char link[80];
< 
< 
756,764c473,474
<                                 memset(meas,0x0,80);
<                                 memset(link,0x0,80);
<                                 strncpy(meas,(EventDef+j)->Msg[k].Event[x].MeasName,strlen((EventDef+j)->Msg[k].Event[x].MeasName));
<                                 strncpy(link,EventTable[l+1].MeasurementLink,strlen(EventTable[l+1].MeasurementLink));
< 
<                                 if(debug)
<                                     printf("meas %s, link %s\r\n",meas,link);
< 
<                                 if( (strcmp(meas,link) == 0)  )
---
> //printf("%s %s\r\n",(EventDef+j)->Msg[k].Event[x].MeasName,EventTable[l].MeasurementLink);
>                                 if( (strncmp((EventDef+j)->Msg[k].Event[x].MeasName,EventTable[l].MeasurementLink,strlen(EventDef[j].Msg[k].Event[x].MeasName)  -1) == 0)  )
766c476,479
<                                     for(e = 1; e < (EventDef+j)->Msg[k].Event[x].NumWords+1;e++)
---
>                                     num_events++;
>                                     M23_FillInM1553Event(i,j,k,l,x);
> #if 0
>                                     if(EventTable[l].EventType == EVENT_TYPE_MEAS_DISCRETE)
768c481
<                                         M23_FillInM1553Event(i,j,k,l,x,e);
---
>                                         M23_FillInM1553Event(i,j,k,l,x);
769a483
> #endif
777a492
> 
781c496
<         if(config->timecode_chan.m1553_timing.Format == B1B_EGI)
---
>         if(config->timecode_chan.m1553_timing.Format == F15_EGI_T20)
784c499
<             M23_AddB1BM1553TimeEvents(config->timecode_chan.m1553_timing.ChannelId);
---
>             M23_AddF15M1553TimeEvents(config->timecode_chan.m1553_timing.ChannelId);
786c501
<         else if(config->timecode_chan.m1553_timing.Format == B52_EGI)
---
>         else if(config->timecode_chan.m1553_timing.Format == B1B_EGI)
789c504
<             M23_AddB52M1553TimeEvents(config->timecode_chan.m1553_timing.ChannelId);
---
>             M23_AddB1BM1553TimeEvents(config->timecode_chan.m1553_timing.ChannelId);
791d505
< 
800,818c514,516
< }
< 
< 
< void M23_DefineM1553DataConversion()
< {
<     int i;
<     int j;
<     int k;
<     int x;
<     int y;
<     int ii;
< 
<     char der[33];
<     char meas[33];
<     char meas_1[33];
<     char meas_2[33];
<     char trigger[33];
< 
<     int num_events = 0;
---
>     if(num_events > 0)
>     {
>         M23_SortM1553Event();
820c518,521
<     int debug;
---
>         if(M1553Events[M1553Index -1].EventContinue  == 1)
>         {
>             M1553Events[M1553Index - 1].EventContinue  = 0;
>         }
822,823c523
<     M23_CHANNEL  const *config;
<     SetupGet(&config);
---
>     }
827c527
<     for(i = 0; i < config->NumEvents;i++)
---
>     if(debug)
829,830c529,531
<         for(j = 1; j < config->NumberConversions + 1;j++)
<         {
---
>         M23_PrintEvent();
>     }
> }
832,835d532
<             memset(der,0x0,33);
<             memset(meas_1,0x0,33);
<             memset(meas_2,0x0,33);
<             memset(trigger,0x0,33);
837c534,536
<             strncpy(der,(dataConversion+j)->DerivedName,strlen((dataConversion+j)->DerivedName) );
---
> void M23_MP_StopChannels(int device,int channel)
> {
>     UINT32 CSR;
839,841c538,542
<             strncpy(meas_1,(dataConversion+j)->MeasName_1,strlen((dataConversion+j)->MeasName_1));
<             strncpy(meas_2,(dataConversion+j)->MeasName_2,strlen((dataConversion+j)->MeasName_2));
<             strncpy(trigger,(dataConversion+j)->TriggerName,strlen((dataConversion+j)->TriggerName));
---
>     /*Clear the CM run bit*/
>     CSR = (0x0 << 16) & 0xFFFF0000;
>     CSR |= 0x0000;
>     CSR |= WRITE_COMMAND;
>     M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_OFFSET);
843,848c544,548
<             for(x = 0; x < 8;x++)
<             {
<                 (dataConversion+j)->CurrentValue_1[x] = 0xDEADBEEF;
<                 (dataConversion+j)->CurrentValue_2[x] = 0xDEADBEEF;
<             }
<             (dataConversion+j)->InitialTrigger = 0;
---
>     usleep(10);
>     CSR = 0;
>     M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_OFFSET); 
>     CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_OFFSET);
>     //printf("Reading CONDOR 0x%x\r\n",CSR);
850,986c550,552
<             //if( strncmp(EventTable[i+1].MeasurementLink,der,strlen(der) - 1) == 0)
<             if( strcmp(EventTable[i+1].MeasurementLink,der) == 0)
<             {
<                 for(k = 1; k < config->NumBuses + 1;k++)
<                 {
<                     for(x = 1; x < (EventDef+k)->NumMsgs + 1;x++)
<                     {
<                         for(y = 1; y < (EventDef+k)->Msg[x].NumMeas + 1;y++)
<                         {
<                             memset(meas,0x0,33);
<                             strncpy(meas,(EventDef+k)->Msg[x].Event[y].MeasName,strlen((EventDef+k)->Msg[x].Event[y].MeasName));
<                             if( (strncmp(meas,meas_1,strlen(meas)) == 0)  )
<                             {
<                                 num_events++;
<                                 (dataConversion+j)->IsPCM           = 0;
<                                 (dataConversion+j)->ChanID1         = config->m1553_chan[k-1].chanID;
<                                 (dataConversion+j)->Msg1.TransRcv   = (EventDef+k)->Msg[x].TransRcv;
<                                 (dataConversion+j)->Msg1.SubAddr    = (EventDef+k)->Msg[x].SubAddr;
<                                 (dataConversion+j)->Msg1.WordCount  = (EventDef+k)->Msg[x].WordCount;
<                                 (dataConversion+j)->Msg1.RT         = (EventDef+k)->Msg[x].RT;
<                                 (dataConversion+j)->Msg1.NumMeas    = (EventDef+k)->Msg[x].NumMeas;
<                                 (dataConversion+j)->EventIndex = y;
< 
<                                 (dataConversion+j)->Msg1.Event[y].NumWords = (EventDef+k)->Msg[x].Event[y].NumWords;
< 
<                                 (dataConversion+j)->Msg1.Event[x].CW_Only   = (EventDef+k)->Msg[x].Event[y].CW_Only;
<                                 for(ii = 1; ii < (EventDef+k)->Msg[x].Event[y].NumWords+1;ii++)
<                                 {
<                                     (dataConversion+j)->Msg1.Event[y].TransOrder[ii]   = (EventDef+k)->Msg[x].Event[y].TransOrder[ii];
<                                     (dataConversion+j)->Msg1.Event[y].Mask[ii]         = (EventDef+k)->Msg[x].Event[y].Mask[ii];
<                                     (dataConversion+j)->Msg1.Event[y].Position[ii]     = (EventDef+k)->Msg[x].Event[y].Position[ii];
<                                     (dataConversion+j)->Msg1.Event[y].WordNumber[ii]   = (EventDef+k)->Msg[x].Event[y].WordNumber[ii];
<                                 }
<                                 if( (strncmp(trigger,meas_1,strlen(trigger)) == 0)  )
<                                 {
<                                     (dataConversion+j)->Msg1.Event[y].IsTrigger   = 1;
<                                 }
<                                 else
<                                 {
<                                     (dataConversion+j)->Msg1.Event[y].IsTrigger   = 0;
<                                 }
<                             }
<                             else if( (strncmp(meas,meas_2,strlen(meas)) == 0)  )
<                             {
<                                 num_events++;
<                                 (dataConversion+j)->IsPCM           = 0;
<                                 (dataConversion+j)->ChanID2         = config->m1553_chan[k-1].chanID;
<                                 (dataConversion+j)->Msg2.TransRcv   = (EventDef+k)->Msg[x].TransRcv;
<                                 (dataConversion+j)->Msg2.SubAddr    = (EventDef+k)->Msg[x].SubAddr;
<                                 (dataConversion+j)->Msg2.WordCount  = (EventDef+k)->Msg[x].WordCount;
<                                 (dataConversion+j)->Msg2.RT         = (EventDef+k)->Msg[x].RT;
<                                 (dataConversion+j)->Msg2.NumMeas    = (EventDef+k)->Msg[x].NumMeas;
<                                 (dataConversion+j)->EventIndex = y;
< 
<                                 (dataConversion+j)->Msg2.Event[x].CW_Only   = (EventDef+k)->Msg[x].Event[x].CW_Only;
< 
<                                 (dataConversion+j)->Msg2.Event[y].NumWords = (EventDef+k)->Msg[x].Event[y].NumWords;
<                                 for(ii = 1; ii < (EventDef+k)->Msg[x].Event[y].NumWords+1;ii++)
<                                 {
<                                     (dataConversion+j)->Msg2.Event[y].TransOrder[ii]   = (EventDef+k)->Msg[x].Event[y].TransOrder[ii];
<                                     (dataConversion+j)->Msg2.Event[y].Mask[ii]         = (EventDef+k)->Msg[x].Event[y].Mask[ii];
<                                     (dataConversion+j)->Msg2.Event[y].Position[ii]     = (EventDef+k)->Msg[x].Event[y].Position[ii];
<                                     (dataConversion+j)->Msg2.Event[y].WordNumber[ii]   = (EventDef+k)->Msg[x].Event[y].WordNumber[ii];
<                                 }
<                                 if( (strncmp(trigger,meas_2,strlen(trigger)) == 0)  )
<                                 {
<                                     (dataConversion+j)->Msg2.Event[y].IsTrigger   = 1;
<                                 }
<                                 else
<                                 {
<                                     (dataConversion+j)->Msg2.Event[y].IsTrigger   = 0;
<                                 }
<                             }
<                         }
<                     }
<                 }
<            }
<         }
<     }
< 
<     if(num_events > 0)
<     {
<         for(i = 0; i < config->NumEvents;i++)
<         {
<             for(j = 1; j < config->NumberConversions + 1;j++)
<             {
<                 memset(der,0x0,33);
<                 strncpy(der,(dataConversion+j)->DerivedName,strlen((dataConversion+j)->DerivedName));
< 
<                 //if( strncmp(EventTable[i+1].MeasurementLink,der,strlen(der) - 1) == 0)
<                 if( strcmp(EventTable[i+1].MeasurementLink,der) == 0)
<                 {
<                     (dataConversion+j)->EventType = EventTable[i+1].EventType;
<                     (dataConversion+j)->EventIC   = EventTable[i+1].EventIC;
<                     (dataConversion+j)->EventMode = EventTable[i+1].EventMode;
<                     for(x = 1; x < (dataConversion+j)->Msg1.NumMeas + 1;x++)
<                     {
<                         for(y = 1; y < (dataConversion+j)->Msg1.Event[x].NumWords+1;y++)
<                         {
<                             M23_FillInM1553DataConversionEvent(j,i,1,y);
<                         }
<                     }
< 
<                     for(x = 1; x < (dataConversion+j)->Msg2.NumMeas+1;x++)
<                     {
<                         for(y = 1; y < (dataConversion+j)->Msg2.Event[x].NumWords+1;y++)
<                         {
<                             M23_FillInM1553DataConversionEvent(j,i,2,y);
<                         }
<                     }
<                 }
<             }
<         }
<     }
< }
< 
< 
< 
< void M23_MP_StopChannels(int device,int channel)
< {
<     UINT32 CSR;
< 
<     /*Clear the CM run bit*/
<     CSR = (0x0 << 16) & 0xFFFF0000;
<     CSR |= 0x0000;
<     CSR |= WRITE_COMMAND;
<     M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_OFFSET);
< 
<     usleep(10);
<     CSR = 0;
<     M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_OFFSET); 
<     CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_OFFSET);
<     //printf("Reading CONDOR 0x%x\r\n",CSR);
< 
<     /*Clear the Enable Bit*/
<     CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ENABLE_OFFSET);
<     M23_mp_write_csr(device,BAR1,CSR & ~MP_CHANNEL_ENABLE,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ENABLE_OFFSET);
---
>     /*Clear the Enable Bit*/
>     CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ENABLE_OFFSET);
>     M23_mp_write_csr(device,BAR1,CSR & ~MP_CHANNEL_ENABLE,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ENABLE_OFFSET);
1014,1084d579
< void M23_ExcludeAll(int device,int channel,int stream)
< {
<     int    i;
<     int    j;
<     int    k;
< 
<     UINT32 CSR;
<     UINT32 FILTER = 0;
< 
<     for(i = 0; i < 32;i++)
<     {
<         for(j = 0; j < 2;j++)
<         {
<             for(k = 0; k < 32;k++)
<             {
<                 FILTER = (M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET) & 0xFFFF0000);
<                 FILTER |= (( (i <<11) | (j << 10) | (k << 5) ) & 0xFFE0);
<                 M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                 FILTER = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                 FILTER &= 0xFFFF000F;
< 
<                 FILTER &= ~(1 << ( stream)) ;
<                 FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
<                 FILTER |= (1 << (16 + stream)) ;
<                 M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET); //Exclude All Messages
<                 CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                 if(CSR != FILTER)
<                 {
<                     M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET); //Exclude All Messages
<                 }
<             }
<         }
<     }
< }
< 
< void M23_IncludeAll(int device,int channel, int stream)
< {
<     int    i;
<     int    j;
<     int    k;
< 
<     UINT32 CSR;
<     UINT32 FILTER = 0;
< 
<     for(i = 0; i < 32;i++)
<     {
<         for(j = 0; j < 2;j++)
<         {
<             for(k = 0; k < 32;k++)
<             {
<                 FILTER = (M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET) & 0xFFFF0000);
<                 FILTER |= (( (i <<11) | (j << 10) | (k << 5) ) & 0xFFE0);
<                 M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                 FILTER = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                 FILTER &= 0xFFFF000F;
< 
<                 FILTER &= ~(1 <<  stream) ;
<                 FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
<                 FILTER &= ~(1 << (16 + stream)) ;
<                 M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET); //Exclude All Messages
<                 CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                 if(CSR != FILTER)
<                 {
<                     M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET); //Exclude All Messages
<                 }
<             }
<         }
<     }
< }
< 
< 
1095c590,591
< void M23_MP_Initialize_M1553_Channel(int device,int channel,M1553_CHANNEL chan,int Enabled)
---
> //int M23_MP_Initialize_M1553_Channel(int device,int channel,int PktMethod,int ChanID)
> void M23_MP_Initialize_M1553_Channel(int device,int channel,M1553_CHANNEL chan)
1097d592
< 
1107d601
<     int    IsEvent;
1111,1115d604
<     UINT32 Enables;
< 
<     UINT32 UpperTable = 0x0;
<     UINT32 LowerTable = 0x0;
< 
1126c615
<         if(Enabled)
---
>         if(chan.pktMethod == M1553_PACKET_METHOD_AUTO)
1127a617
>             PKT = MP_M1553_CHANNEL_PKT_MODE;
1129,1151c619,627
<             if(chan.pktMethod == M1553_PACKET_METHOD_AUTO)
<             {
<                 PKT = MP_M1553_CHANNEL_PKT_MODE;
< 
<             }
<             else
<             {
<                 PKT = MP_M1553_SINGLE_MSG_PKT;
<                 PKT |= 0x01;
<             }
< 
<             PKT |= (M1553_MAX_PACKET_SIZE << 8);
< 
<             /*Set the PKT Method*/
<             M23_mp_write_csr(device,BAR1,PKT,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_PACKET_OFFSET);
< 
<             /*Write The channel ID*/
<             M23_mp_write_csr(device,BAR1,(chan.chanID),(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ID_OFFSET);
< 
<             /*Setup the Watch Words*/
<             /*Write the Lock Interval in 25 nanosecond ticks, 40,000 ticks per millisecond*/
<             CSR = 40000 * chan.m_WatchWordLockIntervalInMilliseconds;
<             M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_WATCH_WORD_TIMEOUT_OFFSET);
---
>             /*TODO Add messages per packet*/
>         }
>         else
>         {
>             PKT = MP_M1553_SINGLE_MSG_PKT;
>             PKT |= 0x01;
>         }
>     
>         PKT |= (M1553_MAX_PACKET_SIZE << 8);
1153,1156c629,630
<             /*Write The Mask and the Pattern*/
<             CSR = (chan.m_WatchWordMask << 16);
<             CSR |= (chan.m_WatchWordPattern & chan.m_WatchWordMask);
<             M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_WATCH_WORD_OFFSET);
---
>         /*Set the PKT Method*/
>         M23_mp_write_csr(device,BAR1,PKT,(MP_CHANNEL_OFFSET * channel) + MP_CONDOR_PACKET_OFFSET);
1158,1159c632
<             /*Write To clear the sticky bit*/
<             M23_mp_write_csr(device,BAR1,0x0,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_WATCH_WORD_EVENT_OFFSET);
---
> #if 0
1160a634,636
>         /*Set the Enable Bit*/
>         CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ENABLE_OFFSET);
>         M23_mp_write_csr(device,BAR1,CSR | MP_CHANNEL_ENABLE,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ENABLE_OFFSET);
1162,1166c638
<             /*Setup the RT*/
<             if( chan.chanID == config->M1553_RT_Control)
<             {
<                 M23_mp_write_csr(device,BAR1,channel,MP_M1553_RT_SELECTION);
<             }
---
> #endif
1168,1172c640,641
<             if( (chan.FilterType == FILTERING_NONE ) || (chan.NumFiltered == 0) )
<             {
<                 /*I need to clear out all the Table entries for stream 1 and 2*/
<                 M23_IncludeAll(device,channel,0);
<             }
---
>         /*Write The channel ID*/
>         M23_mp_write_csr(device,BAR1,(chan.chanID | BROADCAST_MASK),(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_ID_OFFSET);
1174,1175c643,664
<            /*Now Setup any Filtering that needs to be done for this channel*/
<             if(chan.NumFiltered > 0 )
---
>         /*Setup the Watch Words*/
>         /*Write the Lock Interval in 25 nanosecond ticks, 40,000 ticks per millisecond*/
>         CSR = 40000 * chan.m_WatchWordLockIntervalInMilliseconds;
>         M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_WATCH_WORD_TIMEOUT_OFFSET);
> 
>         /*Write The Mask and the Pattern*/
>         CSR = (chan.m_WatchWordMask << 16);
>         CSR |= (chan.m_WatchWordPattern & chan.m_WatchWordMask);
>         M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_WATCH_WORD_OFFSET);
> 
>         /*Write To clear the sticky bit*/
>         M23_mp_write_csr(device,BAR1,0x0,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_WATCH_WORD_EVENT_OFFSET);
>         /*Setup the RT*/
>         if( chan.chanID == config->M1553_RT_Control)
>         {
>             M23_mp_write_csr(device,BAR1,channel,MP_M1553_RT_SELECTION);
>         }
>   
>        /*Now Setup any Filtering that needs to be done for this channel*/
>         if(chan.NumFiltered > 0 )
>         {
>             for(l = 0; l < chan.NumFiltered;l++)
1177,1184c666,668
<                 if( chan.FilterType == EXCLUDE) //Setup to Include all, will exclude on the FLY
<                 {
<                     M23_IncludeAll(device,channel,0);
<                 }
<                 else
<                 {
<                     M23_ExcludeAll(device,channel,0);
<                 }
---
>                 rt = chan.FilteredRT[l]; 
>                 sa = chan.FilteredSA[l]; 
>                 tr = chan.FilteredTR[l]; 
1186,1187c670
< 
<                 for(l = 0; l < chan.NumFiltered;l++)
---
>                 if(rt == 0xFF)
1189,1193c672
<                     rt = chan.FilteredRT[l];
<                     sa = chan.FilteredSA[l];
<                     tr = chan.FilteredTR[l];
< 
<                     if(rt == 0xFF)
---
>                     if(tr == 0xFF)
1195c674
<                         if(tr == 0xFF)
---
>                         if(sa == 0xFF)
1197c676
<                             if(sa == 0xFF)
---
>                             for(i = 0; i < 32;i++)
1199c678
<                                 for(i = 0; i < 32;i++)
---
>                                 for(j = 0; j < 2;j++)
1201,1226c680
<                                     for(j = 0; j < 2;j++)
<                                     {
<                                         for(k = 0; k < 32;k++)
<                                         {
<                                             FILTER = ( (i <<11) | (j << 10) | (k << 5) ) & 0xFFE0;
<                                             if(chan.FilterType == INCLUDE)
<                                             {
<                                                 FILTER |= MP_CHANNEL_FILTER_INCLUDE;
<                                             }
<                                             else
<                                             {
<                                                 FILTER &= ~MP_CHANNEL_FILTER_INCLUDE;
<                                             }
<                                             FILTER |= 0x1;
<                                             FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                             FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
<                                             M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                                         }
<                                     }
<                                 }
<                             }
<                             else /*RT = X, TR = X SA = 0-31*/
<                             {
<                                 for(i = 0; i < 32;i++)
<                                 {
<                                     for(j = 0; j < 2;j++)
---
>                                     for(k = 0; k < 32;k++)
1228c682
<                                         FILTER = ( (i <<11) | (j << 10) | (sa << 5) ) & 0xFFE0;
---
>                                         FILTER = ( (i <<11) | (j << 10) | (k << 5) ) & 0xFFE0;
1238,1239c692
<                                         FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                         FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
---
>                                         //FILTER |= MP_CHANNEL_FILTER_ERRORS; Per Lukes Request 031909
1245c698
<                         else /* TR = 0,1 */
---
>                         else /*RT = X, TR = X SA = 0-31*/
1247,1269c700
<                             if(sa == 0xFF) /*RT = X, TR 0,1, SA = X*/
<                             {
<                                 for(i = 0; i < 32;i++)
<                                 {
<                                     for(k = 0; k < 32;k++)
<                                     {
<                                         FILTER = ( (i <<11) | (tr << 10) | (k << 5) ) & 0xFFE0;
<                                         if(chan.FilterType == INCLUDE)
<                                         {
<                                             FILTER |= MP_CHANNEL_FILTER_INCLUDE;
<                                         }
<                                         else
<                                         {
<                                             FILTER &= ~MP_CHANNEL_FILTER_INCLUDE;
<                                         }
<                                         FILTER |= 0x1;
<                                         FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                         FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
<                                         M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                                     }
<                                 }
<                             }
<                             else /*RT = X, TR 0,1 SA 0-31*/
---
>                             for(i = 0; i < 32;i++)
1271c702
<                                 for(i = 0; i < 32;i++)
---
>                                 for(j = 0; j < 2;j++)
1273c704
<                                     FILTER = ( (i <<11) | (tr << 10) | (sa<< 5) ) & 0xFFE0;
---
>                                     FILTER = ( (i <<11) | (j << 10) | (sa << 5) ) & 0xFFE0;
1282,1284c713,714
<                                     FILTER |=  0x1;
<                                     FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                     FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
---
>                                     FILTER |= 0x1;
>                                     //FILTER |= MP_CHANNEL_FILTER_ERRORS;Per Lukes Request 031909
1290c720
<                     else /*RT != X*/
---
>                     else /* TR = 0,1 */
1292c722
<                         if(tr == 0xFF)
---
>                         if(sa == 0xFF) /*RT = X, TR 0,1, SA = X*/
1294,1316c724
<                             if(sa == 0xFF)
<                             {
<                                 for(i = 0; i < 2; i++)
<                                 {
<                                     for(j = 0; j <  32; j++)
<                                     {
<                                         FILTER = ( (rt <<11) | (i << 10) | (j<< 5) ) & 0xFFE0;
<                                         if(chan.FilterType == INCLUDE)
<                                         {
<                                             FILTER |= MP_CHANNEL_FILTER_INCLUDE;
<                                         }
<                                         else
<                                         {
<                                             FILTER &= ~MP_CHANNEL_FILTER_INCLUDE;
<                                         }
<                                         FILTER |= 0x1;
<                                         FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                         FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
<                                         M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                                     }
<                                 }
<                             }
<                             else /*RT - 0-31 TR = X SA - 0-31*/
---
>                             for(i = 0; i < 32;i++)
1318c726
<                                 for(i = 0; i < 2; i++)
---
>                                 for(k = 0; k < 32;k++)
1320c728
<                                     FILTER = ( (rt <<11) | (i << 10) | (sa<< 5) ) & 0xFFE0;
---
>                                     FILTER = ( (i <<11) | (tr << 10) | (k << 5) ) & 0xFFE0;
1330,1331c738
<                                     FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                     FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
---
>                                     //FILTER |= MP_CHANNEL_FILTER_ERRORS; ;Per Lukes Request 031909
1336c743
<                         else
---
>                         else /*RT = X, TR 0,1 SA 0-31*/
1338c745,769
<                             if(sa == 0xFF)
---
>                             for(i = 0; i < 32;i++)
>                             {
>                                 FILTER = ( (i <<11) | (tr << 10) | (sa<< 5) ) & 0xFFE0;
>                                 if(chan.FilterType == INCLUDE)
>                                 {
>                                     FILTER |= MP_CHANNEL_FILTER_INCLUDE;
>                                 }
>                                 else
>                                 {
>                                     FILTER &= ~MP_CHANNEL_FILTER_INCLUDE;
>                                 }
>                                 FILTER |= 0x1;
>                                 //FILTER |= MP_CHANNEL_FILTER_ERRORS; Per Lukes Request 031909
>                                 M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
>                             }
>                         }
>                     }
>                 }
>                 else /*RT != X*/
>                 {
>                     if(tr == 0xFF)
>                     {
>                         if(sa == 0xFF)
>                         {
>                             for(i = 0; i < 2; i++)
1342c773
<                                     FILTER = ( (rt <<11) | (tr << 10) | (j<< 5) ) & 0xFFE0;
---
>                                     FILTER = ( (rt <<11) | (i << 10) | (j<< 5) ) & 0xFFE0;
1352,1353c783
<                                     FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                     FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
---
>                                     //FILTER |= MP_CHANNEL_FILTER_ERRORS; Per Lukes Request 031909
1357c787,790
<                             else
---
>                         }
>                         else /*RT - 0-31 TR = X SA - 0-31*/
>                         {
>                             for(i = 0; i < 2; i++)
1359c792
<                                 FILTER = ( (rt <<11) | (tr << 10) | (sa<< 5) ) & 0xFFE0;
---
>                                 FILTER = ( (rt <<11) | (i << 10) | (sa<< 5) ) & 0xFFE0;
1368,1370c801,802
<                                 FILTER |=  0x1;
<                                 FILTER |= MP_CHANNEL_FILTER_ERRORS;
<                                 FILTER |= MP_CHANNEL_FILTER_WRITE_ENABLE;
---
>                                 FILTER |= 0x1;
>                                 //FILTER |= MP_CHANNEL_FILTER_ERRORS; Per Lukes Request 031909
1372,1374c804,818
< 
<                                 CSR = M23_mp_read_csr(device,BAR1,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
<                                 if(CSR != FILTER)
---
>                             }
>                         }
>                     }
>                     else
>                     {
>                         if(sa == 0xFF)
>                         {
>                             for(j = 0; j <  32; j++)
>                             {
>                                 FILTER = ( (rt <<11) | (tr << 10) | (j<< 5) ) & 0xFFE0;
>                                 if(chan.FilterType == INCLUDE)
>                                 {
>                                     FILTER |= MP_CHANNEL_FILTER_INCLUDE;
>                                 }
>                                 else
1376c820
<                                     M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET); //Exclude All Messages
---
>                                     FILTER &= ~MP_CHANNEL_FILTER_INCLUDE;
1377a822,824
>                                 FILTER |= 0x1;
>                                 //FILTER |= MP_CHANNEL_FILTER_ERRORS; Per Lukes Request 031909
>                                 M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
1379a827,841
>                         else
>                         {
>                             FILTER = ( (rt <<11) | (tr << 10) | (sa<< 5) ) & 0xFFE0;
>                             if(chan.FilterType == INCLUDE)
>                             {
>                                 FILTER |= MP_CHANNEL_FILTER_INCLUDE;
>                             }
>                             else
>                             {
>                                 FILTER &= ~MP_CHANNEL_FILTER_INCLUDE;
>                             }
>                             FILTER |= 0x1;
>                             //FILTER |= MP_CHANNEL_FILTER_ERRORS; Per Lukes Request 031909
>                             M23_mp_write_csr(device,BAR1,FILTER,(MP_CHANNEL_OFFSET * channel) + MP_CHANNEL_FILTER_OFFSET);
>                         }
1382a845
> 
1383a847
> 
1438c902
<                 BusEvents[channel -1][index] = i;
---
> 		BusEvents[channel -1][index] = i;
1440,1484c904,906
<                 if( M1553Events[i].EventType == EVENT_TYPE_MEAS_LIMIT)
<                 {
<                     if( (dataConversion+M1553Events[i].ConversionIndex)->NumOperands == 1)
<                     {
<                         M1553Events[i].IsTrigger = 1;
<                     }
< 
<                     (dataConversion+M1553Events[i].ConversionIndex)->HighThreshold = 0;
<                     (dataConversion+M1553Events[i].ConversionIndex)->LowThreshold = 0;
< 
<                     if(0)
<                     {
<                         if(M1553Events[i].EventMode == 5) //HIGH Limit
<                         {
<                             LowerTable = (((UINT16)(dataConversion+M1553Events[i].ConversionIndex)->HighLimit << 16) & 0xFFFF0000);
<                         }
<                         else //Low Limit
<                         {
<                             LowerTable = (((UINT16)(dataConversion+M1553Events[i].ConversionIndex)->LowLimit << 16) & 0xFFFF0000);
<                         }
<                     }
<                     else
<                     {
<                         if(M1553Events[i].MultiEvent == 1)
<                         {
<                             LowerTable = ((M1553Events[i].TotalMask << 16) & 0xFFFF0000);
<                         }
<                         else
<                         {
<                             LowerTable = ((M1553Events[i].Mask << 16) & 0xFFFF0000);
<                         }
<                     }
<                 }
<                 else
<                 {
<                     if(M1553Events[i].MultiEvent == 1)
<                     {
<                         LowerTable = ((M1553Events[i].TotalMask << 16) & 0xFFFF0000);
<                     }
<                     else
<                     {
<                         LowerTable = ((M1553Events[i].Mask << 16) & 0xFFFF0000);
<                     }
<                 }
<                 LowerTable |= (UINT16)M1553Events[i].EventNum;
---
>                 CSR = M1553Events[i].Mask;
>                 CSR = (CSR << 16) & 0xFFFF0000;
>                 CSR |= (UINT16)M1553Events[i].EventNum;
1487c909
<                     LowerTable |= MP_M1553_PAUSE_CW;
---
>                     CSR |= MP_M1553_PAUSE_CW;
1491c913
<                     LowerTable |= MP_M1553_RESUME_CW;
---
>                     CSR |= MP_M1553_RESUME_CW;
1493,1495c915,929
< 
< #if 0
<                 if(debug)
---
> 		if(debug)
> 		{
> 		    printf("Event - writing 0x%x to 0x%x\r\n",CSR,(MP_CHANNEL_OFFSET *channel) + M1553_EVENT_NUMBER);
> 		}
> 
> 		
>                 M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + M1553_EVENT_NUMBER);
> 
>                 CSR = M1553Events[i].DataWordNum;
>                 CSR = (CSR << 16) & 0xFFFF0000;
>                 CSR |= (M1553Events[i].CommandWord & 0xFFFF);
>                 //CSR |= (index << 24);
>                 //CSR |= ((i+1) << 24);
>                 CSR |= ((i) << 24);
>                 if(M1553Events[i].CW_Only == 1)
1497c931
<                     printf("Table - writing 0x%x to 0x%x\r\n",LowerTable,(MP_CHANNEL_OFFSET *channel) + MP_M1553_EVENT_DESC_LOWER);
---
>                     CSR |= M1553_COMMAND_WORD_ONLY;
1499,1500d932
< #endif
< 
1502,1506c934
<                 M23_mp_write_csr(device,BAR1,LowerTable,(MP_CHANNEL_OFFSET * channel) + MP_M1553_EVENT_DESC_LOWER);
< 
<                 UpperTable = (M1553Events[i].CommandWord & 0xFFFF);
<                 UpperTable |= ((M1553Events[i].DataWordNum << 16) & 0x3F0000);
<                 if(M1553Events[i].CW_Only == 1)
---
>                 if(M1553Events[i].EventMode == 1)
1508c936,937
<                     UpperTable |= M1553_COMMAND_WORD_ONLY;
---
>                     CSR |= MP_M1553_EVENT_DOWN;
>                     CSR |= MP_M1553_EVENT_UP;
1510,1511c939
< 
<                 if( (M1553Events[i].EventType == EVENT_TYPE_MEAS_DISCRETE) && (M1553Events[i].ConvType == 0) )
---
>                 else if(M1553Events[i].EventMode == 2)
1513,1532c941
<                     if(M1553Events[i].MultiEvent == 0)
<                     {
<                         if(M1553Events[i].EventMode == 1) //Match UP and Down
<                         {
<                             UpperTable |= (0x3 << 24);
<                         }
<                         else if(M1553Events[i].EventMode == 2) //Match UP
<                         {
<                             UpperTable |= (0x1 << 24);
<                         }
<                         else if(M1553Events[i].EventMode == 3) //Match Down
<                         {
<                             UpperTable |= (0x2 << 24);
<                         }
<                     }
<                     else
<                     {
<                         UpperTable |= M1553_EVENT_CAPTURED;
<                         UpperTable |= (0x7 << 24);
<                     }
---
>                     CSR |= MP_M1553_EVENT_UP;
1534c943
<                 else
---
>                 else if(M1553Events[i].EventMode == 3)
1536,1561c945
<                     if( M1553Events[i].EventType == EVENT_TYPE_MEAS_LIMIT)
<                     {
< 
<                         if(M1553Events[i].NotCapturedYet == 1)
<                         {
<                             UpperTable |= M1553_EVENT_CAPTURED;
<                         }
< 
<                         if(M1553Events[i].EventMode == 5) //HIGH Limit
<                         {
<                             UpperTable |= (0x7 << 24);
<                         }
<                         else //Low Limit
<                         {
<                             UpperTable |= (0x6 << 24);
<                         }
<                     }
<                     else //This is a Discrete limit conversion
<                     {
<                         if(M1553Events[i].NotCapturedYet == 1)
<                         {
<                             UpperTable |= M1553_EVENT_CAPTURED;
<                             UpperTable |= (0x7 << 24);
<                         }
<                     }
< 
---
>                     CSR |= MP_M1553_EVENT_DOWN;
1566c950
<                     UpperTable |= MP_M1553_EVENT_CONT;
---
>                     CSR |= MP_M1553_EVENT_CONT;
1571,1575c955
<                     UpperTable |= M1553_EVENT_ENABLED;
<                 }
<                 if(M1553Events[i].Capture1 == 1)
<                 {
<                     UpperTable |= M1553_EVENT_CAPTURE1;
---
>                     CSR |= M1553_EVENT_ENABLED;
1578,1600c958,961
< #if 0
<                 if(debug)
<                 {
<                     printf("Table - writing 0x%x to 0x%x\r\n",UpperTable,(MP_CHANNEL_OFFSET *channel) + MP_M1553_EVENT_DESC_UPPER);
<                 }
< #endif
< 
<                 M23_mp_write_csr(device,BAR1,UpperTable,(MP_CHANNEL_OFFSET * channel) + MP_M1553_EVENT_DESC_UPPER);
< 
< #if 0
<                 if(debug)
<                 {
<                     printf("Table Address 0x%x to 0x%x\r\n",(TableEntryNumber[channel] | M1553_WRITE_TABLE),(MP_CHANNEL_OFFSET * channel) + MP_M1553_EVENT_TABLE_ADDRESS);
<                 }
< #endif
<                 M23_mp_write_csr(device,BAR1,(TableEntryNumber[channel] | M1553_WRITE_TABLE),(MP_CHANNEL_OFFSET * channel) + MP_M1553_EVENT_TABLE_ADDRESS);
<                 M1553Events[i].TableEntry = TableEntryNumber[channel];
<                 TableEntryNumber[channel]++;
< 
<                 M1553Events[i].LowerEntry = LowerTable;
<                 M1553Events[i].UpperEntry = UpperTable;
< 
<                 M1553Events[i].BusNumber = channel;
---
> 		if(debug)
> 		{
> 		    printf("Event - writing 0x%x to 0x%x\r\n",CSR,(MP_CHANNEL_OFFSET *channel) + M1553_EVENT_DESCRIPTION);
> 		}
1601a963
>                 M23_mp_write_csr(device,BAR1,CSR,(MP_CHANNEL_OFFSET * channel) + M1553_EVENT_DESCRIPTION);
1604a967
> 
1610c973
<                  if(config->timecode_chan.m1553_timing.Format == F15_EGI)
---
>                  if(config->timecode_chan.m1553_timing.Format == F15_EGI_T20)
1618,1623c981
<                  else if(config->timecode_chan.m1553_timing.Format == B52_EGI)
<                  {
<                      M23_M1553_SetTiming(device,channel);
<                  }
< 
< 
---
>              
1625a984
> 
1630d988
< 
